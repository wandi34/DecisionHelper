// Code generated by protoc-gen-go. DO NOT EDIT.
// source: decision-helper.proto

package decision_helper

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The Topics Request
type TopicsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicsRequest) Reset()         { *m = TopicsRequest{} }
func (m *TopicsRequest) String() string { return proto.CompactTextString(m) }
func (*TopicsRequest) ProtoMessage()    {}
func (*TopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30e41342fbb1d60d, []int{0}
}

func (m *TopicsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicsRequest.Unmarshal(m, b)
}
func (m *TopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicsRequest.Marshal(b, m, deterministic)
}
func (m *TopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicsRequest.Merge(m, src)
}
func (m *TopicsRequest) XXX_Size() int {
	return xxx_messageInfo_TopicsRequest.Size(m)
}
func (m *TopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopicsRequest proto.InternalMessageInfo

// The response message containing the greetings
type TopicsReply struct {
	Topics               []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicsReply) Reset()         { *m = TopicsReply{} }
func (m *TopicsReply) String() string { return proto.CompactTextString(m) }
func (*TopicsReply) ProtoMessage()    {}
func (*TopicsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_30e41342fbb1d60d, []int{1}
}

func (m *TopicsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicsReply.Unmarshal(m, b)
}
func (m *TopicsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicsReply.Marshal(b, m, deterministic)
}
func (m *TopicsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicsReply.Merge(m, src)
}
func (m *TopicsReply) XXX_Size() int {
	return xxx_messageInfo_TopicsReply.Size(m)
}
func (m *TopicsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicsReply.DiscardUnknown(m)
}

var xxx_messageInfo_TopicsReply proto.InternalMessageInfo

func (m *TopicsReply) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

// The response message containing the decisions for a topic
type DecisionsRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DecisionsRequest) Reset()         { *m = DecisionsRequest{} }
func (m *DecisionsRequest) String() string { return proto.CompactTextString(m) }
func (*DecisionsRequest) ProtoMessage()    {}
func (*DecisionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30e41342fbb1d60d, []int{2}
}

func (m *DecisionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecisionsRequest.Unmarshal(m, b)
}
func (m *DecisionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecisionsRequest.Marshal(b, m, deterministic)
}
func (m *DecisionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecisionsRequest.Merge(m, src)
}
func (m *DecisionsRequest) XXX_Size() int {
	return xxx_messageInfo_DecisionsRequest.Size(m)
}
func (m *DecisionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DecisionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DecisionsRequest proto.InternalMessageInfo

func (m *DecisionsRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

// The response message containing the decisions for a topic
type DecisionsReply struct {
	Decisions            []string `protobuf:"bytes,1,rep,name=decisions,proto3" json:"decisions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DecisionsReply) Reset()         { *m = DecisionsReply{} }
func (m *DecisionsReply) String() string { return proto.CompactTextString(m) }
func (*DecisionsReply) ProtoMessage()    {}
func (*DecisionsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_30e41342fbb1d60d, []int{3}
}

func (m *DecisionsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecisionsReply.Unmarshal(m, b)
}
func (m *DecisionsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecisionsReply.Marshal(b, m, deterministic)
}
func (m *DecisionsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecisionsReply.Merge(m, src)
}
func (m *DecisionsReply) XXX_Size() int {
	return xxx_messageInfo_DecisionsReply.Size(m)
}
func (m *DecisionsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DecisionsReply.DiscardUnknown(m)
}

var xxx_messageInfo_DecisionsReply proto.InternalMessageInfo

func (m *DecisionsReply) GetDecisions() []string {
	if m != nil {
		return m.Decisions
	}
	return nil
}

func init() {
	proto.RegisterType((*TopicsRequest)(nil), "decision_helper.TopicsRequest")
	proto.RegisterType((*TopicsReply)(nil), "decision_helper.TopicsReply")
	proto.RegisterType((*DecisionsRequest)(nil), "decision_helper.DecisionsRequest")
	proto.RegisterType((*DecisionsReply)(nil), "decision_helper.DecisionsReply")
}

func init() { proto.RegisterFile("decision-helper.proto", fileDescriptor_30e41342fbb1d60d) }

var fileDescriptor_30e41342fbb1d60d = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x49, 0x4d, 0xce,
	0x2c, 0xce, 0xcc, 0xcf, 0xd3, 0xcd, 0x48, 0xcd, 0x29, 0x48, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x87, 0x09, 0xc7, 0x43, 0x84, 0x95, 0xf8, 0xb9, 0x78, 0x43, 0xf2, 0x0b, 0x32,
	0x93, 0x8b, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x94, 0x54, 0xb9, 0xb8, 0x61, 0x02, 0x05,
	0x39, 0x95, 0x42, 0x62, 0x5c, 0x6c, 0x25, 0x60, 0xae, 0x04, 0xa3, 0x02, 0xb3, 0x06, 0x67, 0x10,
	0x94, 0xa7, 0xa4, 0xc1, 0x25, 0xe0, 0x02, 0x35, 0x0a, 0xa6, 0x55, 0x48, 0x84, 0x8b, 0x15, 0x2c,
	0x2b, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe1, 0x28, 0xe9, 0x71, 0xf1, 0x21, 0xa9, 0x04,
	0x99, 0x29, 0xc3, 0xc5, 0x09, 0x73, 0x06, 0xcc, 0x58, 0x84, 0x80, 0xd1, 0x6e, 0x46, 0x84, 0x06,
	0x0f, 0xb0, 0x23, 0x85, 0xbc, 0xb9, 0x38, 0xdd, 0x53, 0x4b, 0x20, 0xce, 0x12, 0x92, 0xd3, 0x43,
	0xf3, 0x83, 0x1e, 0x8a, 0x07, 0xa4, 0x64, 0x70, 0xca, 0x17, 0xe4, 0x54, 0x2a, 0x31, 0x08, 0xc5,
	0x70, 0x89, 0xb8, 0xa7, 0x96, 0xc0, 0x9d, 0xe4, 0x96, 0x5f, 0x04, 0x96, 0x17, 0x52, 0xc4, 0xd0,
	0x87, 0xee, 0x41, 0x29, 0x79, 0x7c, 0x4a, 0xc0, 0xa6, 0x3b, 0x99, 0x70, 0x49, 0x67, 0xe6, 0xeb,
	0xa5, 0x17, 0x15, 0x24, 0xeb, 0xa5, 0x56, 0x24, 0xe6, 0x16, 0xe4, 0xa4, 0x16, 0xeb, 0x65, 0xa4,
	0xe6, 0xe4, 0xe4, 0x97, 0xe7, 0x17, 0xe5, 0xa4, 0x38, 0x09, 0xa3, 0xfa, 0x2c, 0x00, 0x14, 0x29,
	0x01, 0x8c, 0x49, 0x6c, 0xe0, 0xd8, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x66, 0x85,
	0x60, 0xb6, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DecisionHelperClient is the client API for DecisionHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DecisionHelperClient interface {
	// Returns topics
	GetTopics(ctx context.Context, in *TopicsRequest, opts ...grpc.CallOption) (*TopicsReply, error)
	GetDecisionsForTopic(ctx context.Context, in *DecisionsRequest, opts ...grpc.CallOption) (*DecisionsReply, error)
}

type decisionHelperClient struct {
	cc *grpc.ClientConn
}

func NewDecisionHelperClient(cc *grpc.ClientConn) DecisionHelperClient {
	return &decisionHelperClient{cc}
}

func (c *decisionHelperClient) GetTopics(ctx context.Context, in *TopicsRequest, opts ...grpc.CallOption) (*TopicsReply, error) {
	out := new(TopicsReply)
	err := c.cc.Invoke(ctx, "/decision_helper.DecisionHelper/GetTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decisionHelperClient) GetDecisionsForTopic(ctx context.Context, in *DecisionsRequest, opts ...grpc.CallOption) (*DecisionsReply, error) {
	out := new(DecisionsReply)
	err := c.cc.Invoke(ctx, "/decision_helper.DecisionHelper/GetDecisionsForTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DecisionHelperServer is the server API for DecisionHelper service.
type DecisionHelperServer interface {
	// Returns topics
	GetTopics(context.Context, *TopicsRequest) (*TopicsReply, error)
	GetDecisionsForTopic(context.Context, *DecisionsRequest) (*DecisionsReply, error)
}

// UnimplementedDecisionHelperServer can be embedded to have forward compatible implementations.
type UnimplementedDecisionHelperServer struct {
}

func (*UnimplementedDecisionHelperServer) GetTopics(ctx context.Context, req *TopicsRequest) (*TopicsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopics not implemented")
}
func (*UnimplementedDecisionHelperServer) GetDecisionsForTopic(ctx context.Context, req *DecisionsRequest) (*DecisionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecisionsForTopic not implemented")
}

func RegisterDecisionHelperServer(s *grpc.Server, srv DecisionHelperServer) {
	s.RegisterService(&_DecisionHelper_serviceDesc, srv)
}

func _DecisionHelper_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionHelperServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decision_helper.DecisionHelper/GetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionHelperServer).GetTopics(ctx, req.(*TopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecisionHelper_GetDecisionsForTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionHelperServer).GetDecisionsForTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decision_helper.DecisionHelper/GetDecisionsForTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionHelperServer).GetDecisionsForTopic(ctx, req.(*DecisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DecisionHelper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "decision_helper.DecisionHelper",
	HandlerType: (*DecisionHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopics",
			Handler:    _DecisionHelper_GetTopics_Handler,
		},
		{
			MethodName: "GetDecisionsForTopic",
			Handler:    _DecisionHelper_GetDecisionsForTopic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "decision-helper.proto",
}
